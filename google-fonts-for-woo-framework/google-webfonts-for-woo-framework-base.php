<?php

class GoogleWebfontsForWooFramework
{
    // The name of the cahce for the the fonts.
    public $trans_cache_name = 'google_webfonts_for_woo_framework_cache';

    // A snapshot of fonts the framework includes.
    // Format is the Woo array('name'=>{font},'variant'=>':'{variant-list})
    public $old_woo_google_fonts = array();

    // The Google API URL we will fetch the font list from.
    public $api_url = 'https://www.googleapis.com/webfonts/v1/webfonts?key=';

    // Admin notice text.
    public $admin_notice = '';

    // The current subsets selected for the site, comma-separated.
    public $font_subsets = 'latin';

    // The name of the option to store the subset(s) selected for the site.
    public $subset_option_name = 'gwfc_google_webfont_subset';

    // The name of the option to store the weights selected for the site.
    public $weight_option_name = 'gwfc_google_webfont_weight';

    // The default weights, until alternatives are selected.
    public $default_weights = array('300', '400', '700');

    // The default API key to use.
    public $google_api_key = 'AIzaSyBp6g_JkgcrQdHS9Id4mZL3oIPxFMXAdNI';

    // Initilialise the plugin.
    public function init() {
        // Add the missing fonts to the non-admin pages too.
        // It needs to be an early action (5) to get in before the theme hook
        // that uses the font list.
        add_filter('wf_get_google_fonts', array($this, 'wf_get_google_fonts'));
        add_action('wp_head', array($this, 'action_set_fonts'), 5);

        // Get the font subsets that have been chosen.
        $subset = get_option($this->subset_option_name, 'latin');
        if (empty($subset)) $subset = 'latin';
        $this->font_subsets = $subset;

        // Get the font weights that have been chosen.
        $weight = get_option($this->weight_option_name, implode(',', $this->default_weights));
        if (empty($weight)) $weight = implode(',', $this->default_weights);
        $this->font_weights = $weight;
    }

    /**
     * Insert any missing Google fonts.
     * We would use a closure in PHP53, but this is the WordPress world.
     */

    public function sort_font_array($a, $b)
    {
        return ($a['name'] < $b['name']) ? -1 : 1;
    }

    /**
     * Filter the fonts that have been generated by the Woo Framework (and now, presumably, other
     * plugins that could be adding fonts, so we can't blindly replaced fonts as we have before).
     * For now, we will overwrite all the fonts, to keep the processing load down. A quick way
     * to merge is needed however, so it plays nicely with other plugins that may insert fonts from
     * other sources.
     */
    public function wf_get_google_fonts($fonts_from_store)
    {
        if (is_admin()) {
            $this->old_woo_google_fonts = $fonts_from_store;
            uasort($this->old_woo_google_fonts, array($this, 'sort_font_array'));
        }

        $all_fonts = $this->getGoogleFontsCached();

        return ( ! empty($all_fonts) ? $all_fonts : $fonts_from_store);
    }

    /**
     * Insert any missing Google fonts.
     * This only works for the Woo Framework prior to 6.0.
     * From 6.0, we need to use a filter over the generation of fonts global.
     */

    public function action_set_fonts()
    {
        // This array is what the Woo Framework defines and uses.
        global $google_fonts;

        // If there is no global google fonts list, bail out.
        // It probably means the Woo framework has fundamentally changed the way it works.
        // If the old fonts have been saved, then also no further actino is needed, as it
        // means we have managed to update the fonts through the wf_get_google_fonts filter.
        if (empty($google_fonts) || ! is_array($google_fonts) || ! empty($this->old_woo_google_fonts)) return;

        // Take a snapshot, before we mess with the list, and sort them by name.
        // A closure would be nice here, but we are restricted to PHP 5.2 for WP.
        // Only do this if we are in an admin page; we don't need the "before" list any
        // other time.
        if (is_admin()) {
            $this->old_woo_google_fonts = $google_fonts;
            uasort($this->old_woo_google_fonts, array($this, 'sort_font_array'));
        }

        // Get the full list of Google fonts available.
        $all_fonts = $this->getGoogleFontsCached();

        if ( ! $all_fonts) return;

        // Completely replace the Woo Framework list with the new list.
        $google_fonts = $all_fonts;
    }

    /**
     * Get the full list of Google fonts, formatted for Woo Framework.
     * We look first in the cache generated by the settings page, and then in
     * the local cache file if not in the transient cache generated in the settings
     * page.
     */

    public function getGoogleFontsCached()
    {
        // Transient caching.
        if (false === ($fonts = get_transient($this->trans_cache_name))) {
            $fonts = $this->getFallbackFonts();

            // Cache indefinitely. The cache will be refreshed on a visit to the settings page.
            if (!empty($fonts)) set_transient($this->trans_cache_name, $fonts);
        }

        return $fonts;
    }

    /**
     * Returns fallback font data, in the same format as getGoogleFontData().
     */

    public function getFallbackFontData()
    {
        $file = dirname(__FILE__) . '/fonts.json';

        if (is_readable($file)) {
            $data = file_get_contents($file);
            return json_decode($data, true);
        }

        return null;
    }

    /**
     * Returns fonts, formatted for Woo Framework, pulled from the local fallback file.
     */

    public function getFallbackFonts()
    {
        $font_data = $this->getFallbackFontData();
        $woo_fonts = array();

        if ( ! empty($font_data)) {
            foreach($font_data as $family => $variants) {
                $woo_fonts[] = array(
                    'name' => $family,
                    'variant' => ':' . implode(',', $this->abbreviateVariants($variants))
                );
            }
        }

        return $woo_fonts;
    }

    /**
     * Abbreviate an array of variants so it is as short as possible.
     * This helps to convert our internal font data to the Woo Framework format.
     */

    public function abbreviateVariants($variants)
    {
        return str_replace(
            array('400', '700'),
            array('r', 'b'),
            $variants
        );
    }
}
